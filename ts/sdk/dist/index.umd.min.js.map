{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/index.ts","../src/contracts/Core.client.ts","../src/contracts/Periphery.client.ts"],"sourcesContent":["/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport * as _0 from \"./Core.types\";\nimport * as _1 from \"./Core.client\";\nimport * as _2 from \"./Periphery.types\";\nimport * as _3 from \"./Periphery.client\";\nexport namespace contracts {\n  export const Core = { ..._0,\n    ..._1\n  };\n  export const Periphery = { ..._2,\n    ..._3\n  };\n}","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nimport { Uint128, InstantiateMsg, ExecuteMsg, GovMsg, RebalanceMsg, SwapRoute, QueryMsg, RangeOrder, Decimal, AllocationResponse, Addr, ConfigResponse, ListAllocationResponse, ListRebalanceInfoResponse, RebalanceInfoResponse, ListStrategyResponse, StrategyResponse, PauseInfoResponse, PortfolioResponse } from \"./Core.types\";\nexport interface CoreReadOnlyInterface {\n  contractAddress: string;\n  config: () => Promise<ConfigResponse>;\n  pauseInfo: () => Promise<PauseInfoResponse>;\n  portfolio: () => Promise<PortfolioResponse>;\n  rebalanceInfo: ({\n    id\n  }: {\n    id?: number;\n  }) => Promise<RebalanceInfoResponse>;\n  listRebalanceInfo: ({\n    limit,\n    order,\n    startAfter\n  }: {\n    limit?: number;\n    order?: RangeOrder;\n    startAfter?: number;\n  }) => Promise<ListRebalanceInfoResponse>;\n  strategy: ({\n    asset\n  }: {\n    asset: string;\n  }) => Promise<StrategyResponse>;\n  listStrategy: ({\n    limit,\n    order,\n    startAfter\n  }: {\n    limit?: number;\n    order?: RangeOrder;\n    startAfter?: string;\n  }) => Promise<ListStrategyResponse>;\n  allocation: ({\n    asset\n  }: {\n    asset: string;\n  }) => Promise<AllocationResponse>;\n  listAllocation: ({\n    limit,\n    order,\n    startAfter\n  }: {\n    limit?: number;\n    order?: RangeOrder;\n    startAfter?: string;\n  }) => Promise<ListAllocationResponse>;\n}\nexport class CoreQueryClient implements CoreReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.config = this.config.bind(this);\n    this.pauseInfo = this.pauseInfo.bind(this);\n    this.portfolio = this.portfolio.bind(this);\n    this.rebalanceInfo = this.rebalanceInfo.bind(this);\n    this.listRebalanceInfo = this.listRebalanceInfo.bind(this);\n    this.strategy = this.strategy.bind(this);\n    this.listStrategy = this.listStrategy.bind(this);\n    this.allocation = this.allocation.bind(this);\n    this.listAllocation = this.listAllocation.bind(this);\n  }\n\n  config = async (): Promise<ConfigResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      config: {}\n    });\n  };\n  pauseInfo = async (): Promise<PauseInfoResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      pause_info: {}\n    });\n  };\n  portfolio = async (): Promise<PortfolioResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      portfolio: {}\n    });\n  };\n  rebalanceInfo = async ({\n    id\n  }: {\n    id?: number;\n  }): Promise<RebalanceInfoResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      rebalance_info: {\n        id\n      }\n    });\n  };\n  listRebalanceInfo = async ({\n    limit,\n    order,\n    startAfter\n  }: {\n    limit?: number;\n    order?: RangeOrder;\n    startAfter?: number;\n  }): Promise<ListRebalanceInfoResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      list_rebalance_info: {\n        limit,\n        order,\n        start_after: startAfter\n      }\n    });\n  };\n  strategy = async ({\n    asset\n  }: {\n    asset: string;\n  }): Promise<StrategyResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      strategy: {\n        asset\n      }\n    });\n  };\n  listStrategy = async ({\n    limit,\n    order,\n    startAfter\n  }: {\n    limit?: number;\n    order?: RangeOrder;\n    startAfter?: string;\n  }): Promise<ListStrategyResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      list_strategy: {\n        limit,\n        order,\n        start_after: startAfter\n      }\n    });\n  };\n  allocation = async ({\n    asset\n  }: {\n    asset: string;\n  }): Promise<AllocationResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      allocation: {\n        asset\n      }\n    });\n  };\n  listAllocation = async ({\n    limit,\n    order,\n    startAfter\n  }: {\n    limit?: number;\n    order?: RangeOrder;\n    startAfter?: string;\n  }): Promise<ListAllocationResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      list_allocation: {\n        limit,\n        order,\n        start_after: startAfter\n      }\n    });\n  };\n}\nexport interface CoreInterface extends CoreReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  mint: ({\n    amount,\n    receiver\n  }: {\n    amount: Uint128;\n    receiver: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  burn: (fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  gov: (fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  rebalance: (fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n}\nexport class CoreClient extends CoreQueryClient implements CoreInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.mint = this.mint.bind(this);\n    this.burn = this.burn.bind(this);\n    this.gov = this.gov.bind(this);\n    this.rebalance = this.rebalance.bind(this);\n  }\n\n  mint = async ({\n    amount,\n    receiver\n  }: {\n    amount: Uint128;\n    receiver: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      mint: {\n        amount,\n        receiver\n      }\n    }, fee, memo, funds);\n  };\n  burn = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      burn: {}\n    }, fee, memo, funds);\n  };\n  gov = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      gov: {}\n    }, fee, memo, funds);\n  };\n  rebalance = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      rebalance: {}\n    }, fee, memo, funds);\n  };\n}","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nimport { SigningCosmWasmClient, ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { InstantiateMsg, ExecuteMsg, Uint128, SwapInfo, SwapRoute } from \"./Periphery.types\";\nexport interface PeripheryInterface {\n  contractAddress: string;\n  sender: string;\n  mintExactAmountOut: ({\n    coreAddr,\n    inputAsset,\n    outputAmount,\n    swapInfo\n  }: {\n    coreAddr: string;\n    inputAsset: string;\n    outputAmount: Uint128;\n    swapInfo: string[][];\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  burnExactAmountIn: ({\n    coreAddr,\n    minOutputAmount,\n    outputAsset,\n    swapInfo\n  }: {\n    coreAddr: string;\n    minOutputAmount: Uint128;\n    outputAsset: string;\n    swapInfo: string[][];\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n}\nexport class PeripheryClient implements PeripheryInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.mintExactAmountOut = this.mintExactAmountOut.bind(this);\n    this.burnExactAmountIn = this.burnExactAmountIn.bind(this);\n  }\n\n  mintExactAmountOut = async ({\n    coreAddr,\n    inputAsset,\n    outputAmount,\n    swapInfo\n  }: {\n    coreAddr: string;\n    inputAsset: string;\n    outputAmount: Uint128;\n    swapInfo: string[][];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      mint_exact_amount_out: {\n        core_addr: coreAddr,\n        input_asset: inputAsset,\n        output_amount: outputAmount,\n        swap_info: swapInfo\n      }\n    }, fee, memo, funds);\n  };\n  burnExactAmountIn = async ({\n    coreAddr,\n    minOutputAmount,\n    outputAsset,\n    swapInfo\n  }: {\n    coreAddr: string;\n    minOutputAmount: Uint128;\n    outputAsset: string;\n    swapInfo: string[][];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      burn_exact_amount_in: {\n        core_addr: coreAddr,\n        min_output_amount: minOutputAmount,\n        output_asset: outputAsset,\n        swap_info: swapInfo\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":["contracts","CoreQueryClient","client","contractAddress","_this","this","config","__awaiter","queryContractSmart","pauseInfo","pause_info","portfolio","rebalanceInfo","_a","id","rebalance_info","listRebalanceInfo","limit","order","startAfter","list_rebalance_info","start_after","strategy","asset","listStrategy","list_strategy","allocation","listAllocation","list_allocation","bind","CoreClient","_super","sender","call","mint","fee","memo","funds","amount","receiver","execute","_b","burn","gov","rebalance","__extends","PeripheryClient","mintExactAmountOut","coreAddr","inputAsset","outputAmount","swapInfo","mint_exact_amount_out","core_addr","input_asset","output_amount","swap_info","burnExactAmountIn","minOutputAmount","outputAsset","burn_exact_amount_in","min_output_amount","output_asset","Core","__assign","_0","_1","Periphery","_2","_3"],"mappings":";;;;;6/DAUiBA,oCC+CjBC,EAIE,SAAYC,EAAwBC,GAApC,IAYCC,EAAAC,KAEDA,KAAAC,OAAS,WAAA,OAAAC,EAAAH,OAAA,OAAA,GAAA,sCACP,MAAO,CAAA,EAAAC,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DG,OAAQ,CAAE,YAGdD,KAAAI,UAAY,WAAA,OAAAF,EAAAH,OAAA,OAAA,GAAA,sCACV,MAAO,CAAA,EAAAC,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DO,WAAY,CAAE,YAGlBL,KAAAM,UAAY,WAAA,OAAAJ,EAAAH,OAAA,OAAA,GAAA,sCACV,MAAO,CAAA,EAAAC,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DQ,UAAW,CAAE,YAGjBN,KAAaO,cAAG,SAAOC,GACrB,IAAAC,EAAED,EAAAC,mEAIF,MAAO,CAAA,EAAAT,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DY,eAAgB,CACdD,GAAEA,aAIRT,KAAiBW,kBAAG,SAAOH,GACzB,IAAAI,UACAC,EAAKL,EAAAK,MACLC,EAAUN,EAAAM,2EAMV,MAAO,CAAA,EAAAd,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DiB,oBAAqB,CACnBH,MAAKA,EACLC,MAAKA,EACLG,YAAaF,aAInBd,KAAQiB,SAAG,SAAOT,GAChB,IAAAU,EAAKV,EAAAU,sEAIL,MAAO,CAAA,EAAAlB,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DmB,SAAU,CACRC,MAAKA,aAIXlB,KAAYmB,aAAG,SAAOX,GACpB,IAAAI,UACAC,EAAKL,EAAAK,MACLC,EAAUN,EAAAM,2EAMV,MAAO,CAAA,EAAAd,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DsB,cAAe,CACbR,MAAKA,EACLC,MAAKA,EACLG,YAAaF,aAInBd,KAAUqB,WAAG,SAAOb,GAClB,IAAAU,EAAKV,EAAAU,sEAIL,MAAO,CAAA,EAAAlB,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DuB,WAAY,CACVH,MAAKA,aAIXlB,KAAcsB,eAAG,SAAOd,GACtB,IAAAI,UACAC,EAAKL,EAAAK,MACLC,EAAUN,EAAAM,2EAMV,MAAO,CAAA,EAAAd,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DyB,gBAAiB,CACfX,MAAKA,EACLC,MAAKA,EACLG,YAAaF,aA5GjBd,KAAKH,OAASA,EACdG,KAAKF,gBAAkBA,EACvBE,KAAKC,OAASD,KAAKC,OAAOuB,KAAKxB,MAC/BA,KAAKI,UAAYJ,KAAKI,UAAUoB,KAAKxB,MACrCA,KAAKM,UAAYN,KAAKM,UAAUkB,KAAKxB,MACrCA,KAAKO,cAAgBP,KAAKO,cAAciB,KAAKxB,MAC7CA,KAAKW,kBAAoBX,KAAKW,kBAAkBa,KAAKxB,MACrDA,KAAKiB,SAAWjB,KAAKiB,SAASO,KAAKxB,MACnCA,KAAKmB,aAAenB,KAAKmB,aAAaK,KAAKxB,MAC3CA,KAAKqB,WAAarB,KAAKqB,WAAWG,KAAKxB,MACvCA,KAAKsB,eAAiBtB,KAAKsB,eAAeE,KAAKxB,KAChD,EAoHHyB,EAAA,SAAAC,GAKE,SAAAD,EAAY5B,EAA+B8B,EAAgB7B,GAA3D,IAAAC,EACE2B,EAAME,KAAA5B,KAAAH,EAAQC,IAQfE,YAEDD,EAAI8B,KAAG,SAAOrB,EAMXsB,EAAwCC,EAAeC,OALxDC,EAAMzB,EAAAyB,OACNC,EAAQ1B,EAAA0B,qBAIP,IAAAJ,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAM9B,KAAKH,OAAOsC,QAAQnC,KAAK2B,OAAQ3B,KAAKF,gBAAiB,CAClE+B,KAAM,CACJI,OAAMA,EACNC,SAAQA,IAETJ,EAAKC,EAAMC,IALd,KAAA,EAAA,MAAA,CAAA,EAAOI,kBAOTrC,EAAAsC,KAAO,SAAOP,EAAwCC,EAAeC,eAAvD,IAAAF,IAAAA,EAAsC,iFAC3C,KAAA,EAAA,MAAA,CAAA,EAAM9B,KAAKH,OAAOsC,QAAQnC,KAAK2B,OAAQ3B,KAAKF,gBAAiB,CAClEuC,KAAM,CAAE,GACPP,EAAKC,EAAMC,IAFd,KAAA,EAAA,MAAA,CAAA,EAAOxB,kBAITT,EAAAuC,IAAM,SAAOR,EAAwCC,EAAeC,eAAvD,IAAAF,IAAAA,EAAsC,iFAC1C,KAAA,EAAA,MAAA,CAAA,EAAM9B,KAAKH,OAAOsC,QAAQnC,KAAK2B,OAAQ3B,KAAKF,gBAAiB,CAClEwC,IAAK,CAAE,GACNR,EAAKC,EAAMC,IAFd,KAAA,EAAA,MAAA,CAAA,EAAOxB,kBAITT,EAAAwC,UAAY,SAAOT,EAAwCC,EAAeC,eAAvD,IAAAF,IAAAA,EAAsC,iFAChD,KAAA,EAAA,MAAA,CAAA,EAAM9B,KAAKH,OAAOsC,QAAQnC,KAAK2B,OAAQ3B,KAAKF,gBAAiB,CAClEyC,UAAW,CAAE,GACZT,EAAKC,EAAMC,IAFd,KAAA,EAAA,MAAA,CAAA,EAAOxB,kBAlCPT,EAAKF,OAASA,EACdE,EAAK4B,OAASA,EACd5B,EAAKD,gBAAkBA,EACvBC,EAAK8B,KAAO9B,EAAK8B,KAAKL,KAAKzB,GAC3BA,EAAKsC,KAAOtC,EAAKsC,KAAKb,KAAKzB,GAC3BA,EAAKuC,IAAMvC,EAAKuC,IAAId,KAAKzB,GACzBA,EAAKwC,UAAYxC,EAAKwC,UAAUf,KAAKzB,IACtC,CA+BH,0PA7CgCyC,CAAef,EAAAC,GA6C9CD,CAAD,CA7CA,CAAgC7B,sGC1JhC6C,EAKE,SAAY5C,EAA+B8B,EAAgB7B,GAA3D,IAMCC,EAAAC,KAEDA,KAAkB0C,mBAAG,SAAOlC,EAUzBsB,EAAwCC,EAAeC,OATxDW,EAAQnC,EAAAmC,SACRC,EAAUpC,EAAAoC,WACVC,EAAYrC,EAAAqC,aACZC,EAAQtC,EAAAsC,qBAMP,IAAAhB,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAM9B,KAAKH,OAAOsC,QAAQnC,KAAK2B,OAAQ3B,KAAKF,gBAAiB,CAClEiD,sBAAuB,CACrBC,UAAWL,EACXM,YAAaL,EACbM,cAAeL,EACfM,UAAWL,IAEZhB,EAAKC,EAAMC,IAPd,KAAA,EAAA,MAAA,CAAA,EAAOI,kBASTpC,KAAiBoD,kBAAG,SAAO5C,EAUxBsB,EAAwCC,EAAeC,OATxDW,EAAQnC,EAAAmC,SACRU,EAAe7C,EAAA6C,gBACfC,EAAW9C,EAAA8C,YACXR,EAAQtC,EAAAsC,qBAMP,IAAAhB,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAM9B,KAAKH,OAAOsC,QAAQnC,KAAK2B,OAAQ3B,KAAKF,gBAAiB,CAClEyD,qBAAsB,CACpBP,UAAWL,EACXa,kBAAmBH,EACnBI,aAAcH,EACdH,UAAWL,IAEZhB,EAAKC,EAAMC,IAPd,KAAA,EAAA,MAAA,CAAA,EAAOI,kBAtCPpC,KAAKH,OAASA,EACdG,KAAK2B,OAASA,EACd3B,KAAKF,gBAAkBA,EACvBE,KAAK0C,mBAAqB1C,KAAK0C,mBAAmBlB,KAAKxB,MACvDA,KAAKoD,kBAAoBpD,KAAKoD,kBAAkB5B,KAAKxB,KACtD,uDFpCH,SAAiBL,GACFA,EAAA+D,KAAYC,EAAAA,EAAA,CAAA,EAAAC,GACpBC,GAEQlE,EAAAmE,UAAiBH,EAAAA,EAAA,CAAA,EAAAI,GACzBC,EAEN,CAPD,CAAiBrE,IAAAA,EAOhB,CAAA"}