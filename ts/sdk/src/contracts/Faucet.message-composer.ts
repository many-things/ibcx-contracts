/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, TokenCreationConfig, Uint128, Action, QueryMsg, RangeOrder, MigrateMsg, GetLastTokenIdResponse, GetRoleResponse, GetTokenResponse, ListAliasesResponse, ListRolesResponse, ListTokensResponse } from "./Faucet.types";
export interface FaucetMessage {
  contractAddress: string;
  sender: string;
  create: ({
    config,
    denom
  }: {
    config: TokenCreationConfig;
    denom: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  mint: ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  burn: ({
    denom
  }: {
    denom: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  grant: ({
    action,
    denom,
    grantee
  }: {
    action: Action;
    denom: string;
    grantee: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  revoke: ({
    action,
    denom,
    revokee
  }: {
    action: Action;
    denom: string;
    revokee: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  release: ({
    action,
    denom
  }: {
    action: Action;
    denom: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  block: ({
    action,
    denom
  }: {
    action: Action;
    denom: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class FaucetMessageComposer implements FaucetMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.create = this.create.bind(this);
    this.mint = this.mint.bind(this);
    this.burn = this.burn.bind(this);
    this.grant = this.grant.bind(this);
    this.revoke = this.revoke.bind(this);
    this.release = this.release.bind(this);
    this.block = this.block.bind(this);
  }

  create = ({
    config,
    denom
  }: {
    config: TokenCreationConfig;
    denom: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create: {
            config,
            denom
          }
        })),
        funds
      })
    };
  };
  mint = ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint: {
            amount,
            denom
          }
        })),
        funds
      })
    };
  };
  burn = ({
    denom
  }: {
    denom: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          burn: {
            denom
          }
        })),
        funds
      })
    };
  };
  grant = ({
    action,
    denom,
    grantee
  }: {
    action: Action;
    denom: string;
    grantee: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          grant: {
            action,
            denom,
            grantee
          }
        })),
        funds
      })
    };
  };
  revoke = ({
    action,
    denom,
    revokee
  }: {
    action: Action;
    denom: string;
    revokee: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          revoke: {
            action,
            denom,
            revokee
          }
        })),
        funds
      })
    };
  };
  release = ({
    action,
    denom
  }: {
    action: Action;
    denom: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          release: {
            action,
            denom
          }
        })),
        funds
      })
    };
  };
  block = ({
    action,
    denom
  }: {
    action: Action;
    denom: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          block: {
            action,
            denom
          }
        })),
        funds
      })
    };
  };
}