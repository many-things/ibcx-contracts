/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { InstantiateMsg, ExecuteMsg, TokenCreationConfig, Uint128, Action, QueryMsg, RangeOrder, MigrateMsg, GetLastTokenIdResponse, GetRoleResponse, GetTokenResponse, ListAliasesResponse, ListRolesResponse, ListTokensResponse } from "./Faucet.types";
import { FaucetQueryClient } from "./Faucet.client";
export interface FaucetReactQuery<TResponse, TData = TResponse> {
  client: FaucetQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface FaucetListRolesQuery<TData> extends FaucetReactQuery<ListRolesResponse, TData> {
  args: {
    denom: string;
    limit?: number;
    order?: RangeOrder;
    startAfter?: string[][];
  };
}
export function useFaucetListRolesQuery<TData = ListRolesResponse>({
  client,
  args,
  options
}: FaucetListRolesQuery<TData>) {
  return useQuery<ListRolesResponse, Error, TData>(["faucetListRoles", client.contractAddress, JSON.stringify(args)], () => client.listRoles({
    denom: args.denom,
    limit: args.limit,
    order: args.order,
    startAfter: args.startAfter
  }), options);
}
export interface FaucetGetRoleQuery<TData> extends FaucetReactQuery<GetRoleResponse, TData> {
  args: {
    account: string;
    denom: string;
  };
}
export function useFaucetGetRoleQuery<TData = GetRoleResponse>({
  client,
  args,
  options
}: FaucetGetRoleQuery<TData>) {
  return useQuery<GetRoleResponse, Error, TData>(["faucetGetRole", client.contractAddress, JSON.stringify(args)], () => client.getRole({
    account: args.account,
    denom: args.denom
  }), options);
}
export interface FaucetGetLastTokenIdQuery<TData> extends FaucetReactQuery<GetLastTokenIdResponse, TData> {}
export function useFaucetGetLastTokenIdQuery<TData = GetLastTokenIdResponse>({
  client,
  options
}: FaucetGetLastTokenIdQuery<TData>) {
  return useQuery<GetLastTokenIdResponse, Error, TData>(["faucetGetLastTokenId", client.contractAddress], () => client.getLastTokenId(), options);
}
export interface FaucetListTokensQuery<TData> extends FaucetReactQuery<ListTokensResponse, TData> {
  args: {
    limit?: number;
    order?: RangeOrder;
    startAfter?: number;
  };
}
export function useFaucetListTokensQuery<TData = ListTokensResponse>({
  client,
  args,
  options
}: FaucetListTokensQuery<TData>) {
  return useQuery<ListTokensResponse, Error, TData>(["faucetListTokens", client.contractAddress, JSON.stringify(args)], () => client.listTokens({
    limit: args.limit,
    order: args.order,
    startAfter: args.startAfter
  }), options);
}
export interface FaucetGetTokenQuery<TData> extends FaucetReactQuery<GetTokenResponse, TData> {
  args: {
    denom: string;
  };
}
export function useFaucetGetTokenQuery<TData = GetTokenResponse>({
  client,
  args,
  options
}: FaucetGetTokenQuery<TData>) {
  return useQuery<GetTokenResponse, Error, TData>(["faucetGetToken", client.contractAddress, JSON.stringify(args)], () => client.getToken({
    denom: args.denom
  }), options);
}
export interface FaucetListAliasesQuery<TData> extends FaucetReactQuery<ListAliasesResponse, TData> {
  args: {
    limit?: number;
    order?: RangeOrder;
    startAfter?: string;
  };
}
export function useFaucetListAliasesQuery<TData = ListAliasesResponse>({
  client,
  args,
  options
}: FaucetListAliasesQuery<TData>) {
  return useQuery<ListAliasesResponse, Error, TData>(["faucetListAliases", client.contractAddress, JSON.stringify(args)], () => client.listAliases({
    limit: args.limit,
    order: args.order,
    startAfter: args.startAfter
  }), options);
}