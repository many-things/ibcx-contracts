/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export interface InstantiateMsg {
  fee: FeePayload;
  gov: string;
  index_denom: string;
  index_units: [string, Decimal][];
  reserve_denom: string;
}
export interface FeePayload {
  burn_fee?: Decimal | null;
  collector: string;
  mint_fee?: Decimal | null;
  streaming_fee?: StreamingFeePayload | null;
}
export interface StreamingFeePayload {
  freeze: boolean;
  rate: Decimal;
}
export type ExecuteMsg = {
  mint: {
    amount: Uint128;
    receiver?: string | null;
    refund_to?: string | null;
  };
} | {
  burn: {
    redeem_to?: string | null;
  };
} | {
  realize: {};
} | {
  gov: GovMsg;
} | {
  rebalance: RebalanceMsg;
};
export type Uint128 = string;
export type GovMsg = {
  pause: {
    expires_at?: number | null;
  };
} | {
  release: {};
} | {
  update_gov: string;
} | {
  accept_gov: {};
} | {
  revoke_gov: {};
} | {
  update_fee_strategy: FeePayload;
} | {
  update_rebalance_manager: string | null;
} | {
  update_reserve_denom: string;
} | {
  update_trade_info: {
    cooldown: number;
    denom: string;
    max_trade_amount: Uint128;
    routes: SwapRoutes;
  };
};
export type SwapRoutes = SwapRoute[];
export type RebalanceMsg = {
  init: {
    deflation: [string, Decimal][];
    inflation: [string, Decimal][];
    manager?: string | null;
  };
} | {
  trade: RebalanceTradeMsg;
} | {
  finalize: {};
};
export type RebalanceTradeMsg = {
  deflate: {
    amount_out: Uint128;
    max_amount_in: Uint128;
    target_denom: string;
  };
} | {
  inflate: {
    amount_in: Uint128;
    min_amount_out: Uint128;
    target_denom: string;
  };
};
export interface SwapRoute {
  pool_id: number;
  token_denom: string;
}
export type QueryMsg = {
  get_balance: {
    account: string;
  };
} | {
  get_total_supply: {};
} | {
  get_config: {
    time?: number | null;
  };
} | {
  get_fee: {
    time?: number | null;
  };
} | {
  get_portfolio: {
    time?: number | null;
  };
} | {
  get_rebalance: {};
} | {
  get_trade_info: {
    denom_in: string;
    denom_out: string;
  };
} | {
  list_trade_info: {
    denom_in: string;
    limit?: number | null;
    order?: RangeOrder | null;
    start_after?: string | null;
  };
} | {
  simulate_mint: {
    amount: Uint128;
    funds?: Coin[] | null;
    time?: number | null;
  };
} | {
  simulate_burn: {
    amount: Uint128;
    time?: number | null;
  };
};
export type RangeOrder = "asc" | "desc";
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface MigrateMsg {
  force?: boolean | null;
}
export type Addr = string;
export interface GetConfigResponse {
  gov: Addr;
  index_denom: string;
  paused: PausedResponse;
  pending_gov?: Addr | null;
  reserve_denom: string;
}
export interface PausedResponse {
  expires_at?: number | null;
  paused: boolean;
}
export interface GetFeeResponse {
  burn_fee?: Decimal | null;
  collector: Addr;
  mint_fee?: Decimal | null;
  streaming_fee?: StreamingFeeResponse | null;
}
export interface StreamingFeeResponse {
  collected: Coin[];
  freeze: boolean;
  last_collected_at: number;
  rate: Decimal;
}
export interface GetPortfolioResponse {
  assets: Coin[];
  total_supply: Uint128;
  units: [string, Decimal][];
}
export interface GetRebalanceResponse {
  rebalance?: RebalancePayload | null;
}
export interface RebalancePayload {
  deflation: [string, Decimal][];
  inflation: [string, Decimal][];
  manager?: Addr | null;
}
export interface GetTradeInfoResponse {
  trade_info?: TradeInfoPayload | null;
}
export interface TradeInfoPayload {
  cooldown: number;
  denom_in: string;
  denom_out: string;
  last_traded_at?: number | null;
  max_trade_amount: Uint128;
  routes: SwapRoutes;
}
export type ListTradeInfoResponse = TradeInfoPayload[];
export interface SimulateBurnResponse {
  burn_amount: Uint128;
  redeem_amount: Coin[];
}
export interface SimulateMintResponse {
  fund_spent: Coin[];
  mint_amount: Uint128;
  refund_amount: Coin[];
}