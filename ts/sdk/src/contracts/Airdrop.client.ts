/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, AirdropResponse, AirdropsResponse, Uint64, QualificationResponse } from "./Airdrop.types";
export interface AirdropReadOnlyInterface {
  contractAddress: string;
  airdrop: () => Promise<AirdropResponse>;
  airdrops: () => Promise<AirdropsResponse>;
  latestAirdropId: () => Promise<Uint64>;
  qualification: ({
    beneficiary,
    merkleProof
  }: {
    beneficiary: string;
    merkleProof: string[];
  }) => Promise<QualificationResponse>;
}
export class AirdropQueryClient implements AirdropReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.airdrop = this.airdrop.bind(this);
    this.airdrops = this.airdrops.bind(this);
    this.latestAirdropId = this.latestAirdropId.bind(this);
    this.qualification = this.qualification.bind(this);
  }

  airdrop = async (): Promise<AirdropResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      airdrop: {}
    });
  };
  airdrops = async (): Promise<AirdropsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      airdrops: {}
    });
  };
  latestAirdropId = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      latest_airdrop_id: {}
    });
  };
  qualification = async ({
    beneficiary,
    merkleProof
  }: {
    beneficiary: string;
    merkleProof: string[];
  }): Promise<QualificationResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      qualification: {
        beneficiary,
        merkle_proof: merkleProof
      }
    });
  };
}
export interface AirdropInterface extends AirdropReadOnlyInterface {
  contractAddress: string;
  sender: string;
  regsiter: ({
    label,
    merkleRoot
  }: {
    label: string;
    merkleRoot: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  claim: ({
    airdropId,
    beneficiary,
    merkleProof
  }: {
    airdropId: number;
    beneficiary?: string;
    merkleProof: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AirdropClient extends AirdropQueryClient implements AirdropInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.regsiter = this.regsiter.bind(this);
    this.claim = this.claim.bind(this);
  }

  regsiter = async ({
    label,
    merkleRoot
  }: {
    label: string;
    merkleRoot: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      regsiter: {
        label,
        merkle_root: merkleRoot
      }
    }, fee, memo, funds);
  };
  claim = async ({
    airdropId,
    beneficiary,
    merkleProof
  }: {
    airdropId: number;
    beneficiary?: string;
    merkleProof: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {
        airdrop_id: airdropId,
        beneficiary,
        merkle_proof: merkleProof
      }
    }, fee, memo, funds);
  };
}