/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Decimal, InstantiateMsg, FeePayload, StreamingFeePayload, ExecuteMsg, Uint128, GovMsg, SwapRoutes, RebalanceMsg, RebalanceTradeMsg, SwapRoute, QueryMsg, Coin, Addr, GetConfigResponse, GetFeeResponse, StreamingFeeResponse, GetPauseInfoResponse, GetPortfolioResponse, SimulateBurnResponse, SimulateMintResponse } from "./Core.types";
export interface CoreReadOnlyInterface {
  contractAddress: string;
  getBalance: ({
    account
  }: {
    account: string;
  }) => Promise<Uint128>;
  getConfig: () => Promise<GetConfigResponse>;
  getFee: ({
    time
  }: {
    time?: number;
  }) => Promise<GetFeeResponse>;
  getPauseInfo: ({
    time
  }: {
    time?: number;
  }) => Promise<GetPauseInfoResponse>;
  getPortfolio: ({
    time
  }: {
    time?: number;
  }) => Promise<GetPortfolioResponse>;
  simulateMint: ({
    amount,
    funds,
    time
  }: {
    amount: Uint128;
    funds: Coin[];
    time?: number;
  }) => Promise<SimulateMintResponse>;
  simulateBurn: ({
    amount,
    time
  }: {
    amount: Uint128;
    time?: number;
  }) => Promise<SimulateBurnResponse>;
}
export class CoreQueryClient implements CoreReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getBalance = this.getBalance.bind(this);
    this.getConfig = this.getConfig.bind(this);
    this.getFee = this.getFee.bind(this);
    this.getPauseInfo = this.getPauseInfo.bind(this);
    this.getPortfolio = this.getPortfolio.bind(this);
    this.simulateMint = this.simulateMint.bind(this);
    this.simulateBurn = this.simulateBurn.bind(this);
  }

  getBalance = async ({
    account
  }: {
    account: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_balance: {
        account
      }
    });
  };
  getConfig = async (): Promise<GetConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
  getFee = async ({
    time
  }: {
    time?: number;
  }): Promise<GetFeeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_fee: {
        time
      }
    });
  };
  getPauseInfo = async ({
    time
  }: {
    time?: number;
  }): Promise<GetPauseInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_pause_info: {
        time
      }
    });
  };
  getPortfolio = async ({
    time
  }: {
    time?: number;
  }): Promise<GetPortfolioResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_portfolio: {
        time
      }
    });
  };
  simulateMint = async ({
    amount,
    funds,
    time
  }: {
    amount: Uint128;
    funds: Coin[];
    time?: number;
  }): Promise<SimulateMintResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulate_mint: {
        amount,
        funds,
        time
      }
    });
  };
  simulateBurn = async ({
    amount,
    time
  }: {
    amount: Uint128;
    time?: number;
  }): Promise<SimulateBurnResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulate_burn: {
        amount,
        time
      }
    });
  };
}
export interface CoreInterface extends CoreReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mint: ({
    amount,
    receiver,
    refundTo
  }: {
    amount: Uint128;
    receiver?: string;
    refundTo?: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  burn: ({
    redeemTo
  }: {
    redeemTo?: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  realize: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  gov: (govMsg: GovMsg, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  rebalance: (rebalanceMsg: RebalanceMsg, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CoreClient extends CoreQueryClient implements CoreInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mint = this.mint.bind(this);
    this.burn = this.burn.bind(this);
    this.realize = this.realize.bind(this);
    this.gov = this.gov.bind(this);
    this.rebalance = this.rebalance.bind(this);
  }

  mint = async ({
    amount,
    receiver,
    refundTo
  }: {
    amount: Uint128;
    receiver?: string;
    refundTo?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {
        amount,
        receiver,
        refund_to: refundTo
      }
    }, fee, memo, funds);
  };
  burn = async ({
    redeemTo
  }: {
    redeemTo?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn: {
        redeem_to: redeemTo
      }
    }, fee, memo, funds);
  };
  realize = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      realize: {}
    }, fee, memo, funds);
  };
  gov = async (govMsg: GovMsg, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      gov: govMsg
    }, fee, memo, funds);
  };
  rebalance = async (rebalanceMsg: RebalanceMsg, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      rebalance: rebalanceMsg
    }, fee, memo, funds);
  };
}