/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Decimal, InstantiateMsg, FeePayload, StreamingFeePayload, ExecuteMsg, Uint128, GovMsg, SwapRoutes, RebalanceMsg, RebalanceTradeMsg, SwapRoute, QueryMsg, RangeOrder, Coin, MigrateMsg, Addr, GetConfigResponse, PausedResponse, GetFeeResponse, StreamingFeeResponse, GetPortfolioResponse, GetRebalanceResponse, RebalancePayload, GetTradeInfoResponse, TradeInfoPayload, ListTradeInfoResponse, SimulateBurnResponse, SimulateMintResponse } from "./Core.types";
export interface CoreMessage {
  contractAddress: string;
  sender: string;
  mint: ({
    amount,
    receiver,
    refundTo
  }: {
    amount: Uint128;
    receiver?: string;
    refundTo?: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  burn: ({
    redeemTo
  }: {
    redeemTo?: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  realize: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  gov: (govMsg: GovMsg, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  rebalance: (rebalanceMsg: RebalanceMsg, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CoreMessageComposer implements CoreMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mint = this.mint.bind(this);
    this.burn = this.burn.bind(this);
    this.realize = this.realize.bind(this);
    this.gov = this.gov.bind(this);
    this.rebalance = this.rebalance.bind(this);
  }

  mint = ({
    amount,
    receiver,
    refundTo
  }: {
    amount: Uint128;
    receiver?: string;
    refundTo?: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint: {
            amount,
            receiver,
            refund_to: refundTo
          }
        })),
        funds
      })
    };
  };
  burn = ({
    redeemTo
  }: {
    redeemTo?: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          burn: {
            redeem_to: redeemTo
          }
        })),
        funds
      })
    };
  };
  realize = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          realize: {}
        })),
        funds
      })
    };
  };
  gov = (govMsg: GovMsg, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          gov: govMsg
        })),
        funds
      })
    };
  };
  rebalance = (rebalanceMsg: RebalanceMsg, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          rebalance: rebalanceMsg
        })),
        funds
      })
    };
  };
}