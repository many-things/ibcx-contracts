/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { InstantiateMsg, ExecuteMsg, RegisterPayload, AirdropId, ClaimPayload, Uint128, QueryMsg, ListAirdropsQueryOptions, RangeOrder, AirdropType, MigrateMsg, GetAirdropResponse, GetClaimResponse, GetLabelResponse, LatestAirdropResponse, ListAirdropsResponse, ListClaimsResponse, ListLabelsResponse, VerifyClaimResponse } from "./Airdrop.types";
import { AirdropQueryClient } from "./Airdrop.client";
export interface AirdropReactQuery<TResponse, TData = TResponse> {
  client: AirdropQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface AirdropListLabelsQuery<TData> extends AirdropReactQuery<ListLabelsResponse, TData> {
  args: {
    limit?: number;
    order?: RangeOrder;
    startAfter?: string;
  };
}
export function useAirdropListLabelsQuery<TData = ListLabelsResponse>({
  client,
  args,
  options
}: AirdropListLabelsQuery<TData>) {
  return useQuery<ListLabelsResponse, Error, TData>(["airdropListLabels", client.contractAddress, JSON.stringify(args)], () => client.listLabels({
    limit: args.limit,
    order: args.order,
    startAfter: args.startAfter
  }), options);
}
export interface AirdropGetLabelQuery<TData> extends AirdropReactQuery<GetLabelResponse, TData> {
  args: {
    label: string;
  };
}
export function useAirdropGetLabelQuery<TData = GetLabelResponse>({
  client,
  args,
  options
}: AirdropGetLabelQuery<TData>) {
  return useQuery<GetLabelResponse, Error, TData>(["airdropGetLabel", client.contractAddress, JSON.stringify(args)], () => client.getLabel({
    label: args.label
  }), options);
}
export interface AirdropListClaimsQuery<TData> extends AirdropReactQuery<ListClaimsResponse, TData> {
  args: {
    airdrop: AirdropId;
    limit?: number;
    order?: RangeOrder;
    startAfter?: string;
  };
}
export function useAirdropListClaimsQuery<TData = ListClaimsResponse>({
  client,
  args,
  options
}: AirdropListClaimsQuery<TData>) {
  return useQuery<ListClaimsResponse, Error, TData>(["airdropListClaims", client.contractAddress, JSON.stringify(args)], () => client.listClaims({
    airdrop: args.airdrop,
    limit: args.limit,
    order: args.order,
    startAfter: args.startAfter
  }), options);
}
export interface AirdropVerifyClaimQuery<TData> extends AirdropReactQuery<VerifyClaimResponse, TData> {
  args: {
    claim: ClaimPayload;
  };
}
export function useAirdropVerifyClaimQuery<TData = VerifyClaimResponse>({
  client,
  args,
  options
}: AirdropVerifyClaimQuery<TData>) {
  return useQuery<VerifyClaimResponse, Error, TData>(["airdropVerifyClaim", client.contractAddress, JSON.stringify(args)], () => client.verifyClaim({
    claim: args.claim
  }), options);
}
export interface AirdropGetClaimQuery<TData> extends AirdropReactQuery<GetClaimResponse, TData> {
  args: {
    airdrop: AirdropId;
    claimKey: string;
  };
}
export function useAirdropGetClaimQuery<TData = GetClaimResponse>({
  client,
  args,
  options
}: AirdropGetClaimQuery<TData>) {
  return useQuery<GetClaimResponse, Error, TData>(["airdropGetClaim", client.contractAddress, JSON.stringify(args)], () => client.getClaim({
    airdrop: args.airdrop,
    claimKey: args.claimKey
  }), options);
}
export interface AirdropLatestAirdropIdQuery<TData> extends AirdropReactQuery<LatestAirdropResponse, TData> {}
export function useAirdropLatestAirdropIdQuery<TData = LatestAirdropResponse>({
  client,
  options
}: AirdropLatestAirdropIdQuery<TData>) {
  return useQuery<LatestAirdropResponse, Error, TData>(["airdropLatestAirdropId", client.contractAddress], () => client.latestAirdropId(), options);
}
export interface AirdropListAirdropsQuery<TData> extends AirdropReactQuery<ListAirdropsResponse, TData> {
  args: {
    option: ListAirdropsQueryOptions;
  };
}
export function useAirdropListAirdropsQuery<TData = ListAirdropsResponse>({
  client,
  args,
  options
}: AirdropListAirdropsQuery<TData>) {
  return useQuery<ListAirdropsResponse, Error, TData>(["airdropListAirdrops", client.contractAddress, JSON.stringify(args)], () => client.listAirdrops({
    option: args.option
  }), options);
}
export interface AirdropGetAirdropQuery<TData> extends AirdropReactQuery<GetAirdropResponse, TData> {
  args: {
    id: AirdropId;
  };
}
export function useAirdropGetAirdropQuery<TData = GetAirdropResponse>({
  client,
  args,
  options
}: AirdropGetAirdropQuery<TData>) {
  return useQuery<GetAirdropResponse, Error, TData>(["airdropGetAirdrop", client.contractAddress, JSON.stringify(args)], () => client.getAirdrop({
    id: args.id
  }), options);
}