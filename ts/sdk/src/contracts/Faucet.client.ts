/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, TokenCreationConfig, Uint128, Action, QueryMsg, RangeOrder, MigrateMsg, GetLastTokenIdResponse, GetRoleResponse, GetTokenResponse, ListAliasesResponse, ListRolesResponse, ListTokensResponse } from "./Faucet.types";
export interface FaucetReadOnlyInterface {
  contractAddress: string;
  listAliases: ({
    limit,
    order,
    startAfter
  }: {
    limit?: number;
    order?: RangeOrder;
    startAfter?: string;
  }) => Promise<ListAliasesResponse>;
  getToken: ({
    denom
  }: {
    denom: string;
  }) => Promise<GetTokenResponse>;
  listTokens: ({
    limit,
    order,
    startAfter
  }: {
    limit?: number;
    order?: RangeOrder;
    startAfter?: number;
  }) => Promise<ListTokensResponse>;
  getLastTokenId: () => Promise<GetLastTokenIdResponse>;
  getRole: ({
    account,
    denom
  }: {
    account: string;
    denom: string;
  }) => Promise<GetRoleResponse>;
  listRoles: ({
    denom,
    limit,
    order,
    startAfter
  }: {
    denom: string;
    limit?: number;
    order?: RangeOrder;
    startAfter?: string[][];
  }) => Promise<ListRolesResponse>;
}
export class FaucetQueryClient implements FaucetReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.listAliases = this.listAliases.bind(this);
    this.getToken = this.getToken.bind(this);
    this.listTokens = this.listTokens.bind(this);
    this.getLastTokenId = this.getLastTokenId.bind(this);
    this.getRole = this.getRole.bind(this);
    this.listRoles = this.listRoles.bind(this);
  }

  listAliases = async ({
    limit,
    order,
    startAfter
  }: {
    limit?: number;
    order?: RangeOrder;
    startAfter?: string;
  }): Promise<ListAliasesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_aliases: {
        limit,
        order,
        start_after: startAfter
      }
    });
  };
  getToken = async ({
    denom
  }: {
    denom: string;
  }): Promise<GetTokenResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_token: {
        denom
      }
    });
  };
  listTokens = async ({
    limit,
    order,
    startAfter
  }: {
    limit?: number;
    order?: RangeOrder;
    startAfter?: number;
  }): Promise<ListTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_tokens: {
        limit,
        order,
        start_after: startAfter
      }
    });
  };
  getLastTokenId = async (): Promise<GetLastTokenIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_last_token_id: {}
    });
  };
  getRole = async ({
    account,
    denom
  }: {
    account: string;
    denom: string;
  }): Promise<GetRoleResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_role: {
        account,
        denom
      }
    });
  };
  listRoles = async ({
    denom,
    limit,
    order,
    startAfter
  }: {
    denom: string;
    limit?: number;
    order?: RangeOrder;
    startAfter?: string[][];
  }): Promise<ListRolesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_roles: {
        denom,
        limit,
        order,
        start_after: startAfter
      }
    });
  };
}
export interface FaucetInterface extends FaucetReadOnlyInterface {
  contractAddress: string;
  sender: string;
  create: ({
    config,
    denom
  }: {
    config: TokenCreationConfig;
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  mint: ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  burn: ({
    denom
  }: {
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  grant: ({
    action,
    denom,
    grantee
  }: {
    action: Action;
    denom: string;
    grantee: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  revoke: ({
    action,
    denom,
    revokee
  }: {
    action: Action;
    denom: string;
    revokee: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  release: ({
    action,
    denom
  }: {
    action: Action;
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  block: ({
    action,
    denom
  }: {
    action: Action;
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class FaucetClient extends FaucetQueryClient implements FaucetInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.create = this.create.bind(this);
    this.mint = this.mint.bind(this);
    this.burn = this.burn.bind(this);
    this.grant = this.grant.bind(this);
    this.revoke = this.revoke.bind(this);
    this.release = this.release.bind(this);
    this.block = this.block.bind(this);
  }

  create = async ({
    config,
    denom
  }: {
    config: TokenCreationConfig;
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create: {
        config,
        denom
      }
    }, fee, memo, funds);
  };
  mint = async ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {
        amount,
        denom
      }
    }, fee, memo, funds);
  };
  burn = async ({
    denom
  }: {
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn: {
        denom
      }
    }, fee, memo, funds);
  };
  grant = async ({
    action,
    denom,
    grantee
  }: {
    action: Action;
    denom: string;
    grantee: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      grant: {
        action,
        denom,
        grantee
      }
    }, fee, memo, funds);
  };
  revoke = async ({
    action,
    denom,
    revokee
  }: {
    action: Action;
    denom: string;
    revokee: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      revoke: {
        action,
        denom,
        revokee
      }
    }, fee, memo, funds);
  };
  release = async ({
    action,
    denom
  }: {
    action: Action;
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      release: {
        action,
        denom
      }
    }, fee, memo, funds);
  };
  block = async ({
    action,
    denom
  }: {
    action: Action;
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      block: {
        action,
        denom
      }
    }, fee, memo, funds);
  };
}