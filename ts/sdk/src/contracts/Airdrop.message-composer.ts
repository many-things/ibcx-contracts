/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import {
  InstantiateMsg,
  ExecuteMsg,
  RegisterPayload,
  AirdropId,
  ClaimPayload,
  Uint128,
  QueryMsg,
  ListAirdropsQueryOptions,
  RangeOrder,
  AirdropType,
  MigrateMsg,
  GetAirdropResponse,
  GetClaimResponse,
  GetLabelResponse,
  LatestAirdropResponse,
  ListAirdropsResponse,
  ListClaimsResponse,
  ListLabelsResponse,
  VerifyClaimResponse,
} from "./Airdrop.types";
export interface AirdropMessage {
  contractAddress: string;
  sender: string;
  register: (
    registerPayload: RegisterPayload,
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject;
  fund: (
    airdropId: AirdropId,
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject;
  claim: (
    claimPayload: ClaimPayload,
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject;
  close: (
    airdropId: AirdropId,
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject;
}
export class AirdropMessageComposer implements AirdropMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.register = this.register.bind(this);
    this.fund = this.fund.bind(this);
    this.claim = this.claim.bind(this);
    this.close = this.close.bind(this);
  }

  register = (
    registerPayload: RegisterPayload,
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            register: registerPayload,
          })
        ),
        funds,
      }),
    };
  };
  fund = (
    airdropId: AirdropId,
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            fund: airdropId,
          })
        ),
        funds,
      }),
    };
  };
  claim = (
    claimPayload: ClaimPayload,
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            claim: claimPayload,
          })
        ),
        funds,
      }),
    };
  };
  close = (
    airdropId: AirdropId,
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            close: airdropId,
          })
        ),
        funds,
      }),
    };
  };
}
