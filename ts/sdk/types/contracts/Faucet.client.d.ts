/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { TokenCreationConfig, Uint128, Action, RangeOrder, GetLastTokenIdResponse, GetRoleResponse, GetTokenResponse, ListAliasesResponse, ListRolesResponse, ListTokensResponse } from "./Faucet.types";
export interface FaucetReadOnlyInterface {
    contractAddress: string;
    listAliases: ({ limit, order, startAfter }: {
        limit?: number;
        order?: RangeOrder;
        startAfter?: string;
    }) => Promise<ListAliasesResponse>;
    getToken: ({ denom }: {
        denom: string;
    }) => Promise<GetTokenResponse>;
    listTokens: ({ limit, order, startAfter }: {
        limit?: number;
        order?: RangeOrder;
        startAfter?: number;
    }) => Promise<ListTokensResponse>;
    getLastTokenId: () => Promise<GetLastTokenIdResponse>;
    getRole: ({ account, denom }: {
        account: string;
        denom: string;
    }) => Promise<GetRoleResponse>;
    listRoles: ({ denom, limit, order, startAfter }: {
        denom: string;
        limit?: number;
        order?: RangeOrder;
        startAfter?: string[][];
    }) => Promise<ListRolesResponse>;
}
export declare class FaucetQueryClient implements FaucetReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    listAliases: ({ limit, order, startAfter }: {
        limit?: number | undefined;
        order?: RangeOrder | undefined;
        startAfter?: string | undefined;
    }) => Promise<ListAliasesResponse>;
    getToken: ({ denom }: {
        denom: string;
    }) => Promise<GetTokenResponse>;
    listTokens: ({ limit, order, startAfter }: {
        limit?: number | undefined;
        order?: RangeOrder | undefined;
        startAfter?: number | undefined;
    }) => Promise<ListTokensResponse>;
    getLastTokenId: () => Promise<GetLastTokenIdResponse>;
    getRole: ({ account, denom }: {
        account: string;
        denom: string;
    }) => Promise<GetRoleResponse>;
    listRoles: ({ denom, limit, order, startAfter }: {
        denom: string;
        limit?: number | undefined;
        order?: RangeOrder | undefined;
        startAfter?: string[][] | undefined;
    }) => Promise<ListRolesResponse>;
}
export interface FaucetInterface extends FaucetReadOnlyInterface {
    contractAddress: string;
    sender: string;
    create: ({ config, denom }: {
        config: TokenCreationConfig;
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    mint: ({ amount, denom }: {
        amount: Uint128;
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ denom }: {
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    grant: ({ action, denom, grantee }: {
        action: Action;
        denom: string;
        grantee: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    revoke: ({ action, denom, revokee }: {
        action: Action;
        denom: string;
        revokee: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    release: ({ action, denom }: {
        action: Action;
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    block: ({ action, denom }: {
        action: Action;
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class FaucetClient extends FaucetQueryClient implements FaucetInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    create: ({ config, denom }: {
        config: TokenCreationConfig;
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    mint: ({ amount, denom }: {
        amount: Uint128;
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ denom }: {
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    grant: ({ action, denom, grantee }: {
        action: Action;
        denom: string;
        grantee: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    revoke: ({ action, denom, revokee }: {
        action: Action;
        denom: string;
        revokee: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    release: ({ action, denom }: {
        action: Action;
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    block: ({ action, denom }: {
        action: Action;
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=Faucet.client.d.ts.map