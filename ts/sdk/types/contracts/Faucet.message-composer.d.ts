/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { TokenCreationConfig, Uint128, Action } from "./Faucet.types";
export interface FaucetMessage {
    contractAddress: string;
    sender: string;
    create: ({ config, denom }: {
        config: TokenCreationConfig;
        denom: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    mint: ({ amount, denom }: {
        amount: Uint128;
        denom: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    burn: ({ denom }: {
        denom: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    grant: ({ action, denom, grantee }: {
        action: Action;
        denom: string;
        grantee: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    revoke: ({ action, denom, revokee }: {
        action: Action;
        denom: string;
        revokee: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    release: ({ action, denom }: {
        action: Action;
        denom: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    block: ({ action, denom }: {
        action: Action;
        denom: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class FaucetMessageComposer implements FaucetMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    create: ({ config, denom }: {
        config: TokenCreationConfig;
        denom: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    mint: ({ amount, denom }: {
        amount: Uint128;
        denom: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    burn: ({ denom }: {
        denom: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    grant: ({ action, denom, grantee }: {
        action: Action;
        denom: string;
        grantee: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    revoke: ({ action, denom, revokee }: {
        action: Action;
        denom: string;
        revokee: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    release: ({ action, denom }: {
        action: Action;
        denom: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    block: ({ action, denom }: {
        action: Action;
        denom: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
//# sourceMappingURL=Faucet.message-composer.d.ts.map