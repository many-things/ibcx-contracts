/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, RangeOrder, AllocationResponse, ConfigResponse, ListAllocationResponse, ListRebalanceInfoResponse, RebalanceInfoResponse, ListStrategyResponse, StrategyResponse, PauseInfoResponse, PortfolioResponse } from "./Core.types";
export interface CoreReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    pauseInfo: () => Promise<PauseInfoResponse>;
    portfolio: () => Promise<PortfolioResponse>;
    rebalanceInfo: ({ id }: {
        id?: number;
    }) => Promise<RebalanceInfoResponse>;
    listRebalanceInfo: ({ limit, order, startAfter }: {
        limit?: number;
        order?: RangeOrder;
        startAfter?: number;
    }) => Promise<ListRebalanceInfoResponse>;
    strategy: ({ asset }: {
        asset: string;
    }) => Promise<StrategyResponse>;
    listStrategy: ({ limit, order, startAfter }: {
        limit?: number;
        order?: RangeOrder;
        startAfter?: string;
    }) => Promise<ListStrategyResponse>;
    allocation: ({ asset }: {
        asset: string;
    }) => Promise<AllocationResponse>;
    listAllocation: ({ limit, order, startAfter }: {
        limit?: number;
        order?: RangeOrder;
        startAfter?: string;
    }) => Promise<ListAllocationResponse>;
}
export declare class CoreQueryClient implements CoreReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    pauseInfo: () => Promise<PauseInfoResponse>;
    portfolio: () => Promise<PortfolioResponse>;
    rebalanceInfo: ({ id }: {
        id?: number;
    }) => Promise<RebalanceInfoResponse>;
    listRebalanceInfo: ({ limit, order, startAfter }: {
        limit?: number;
        order?: RangeOrder;
        startAfter?: number;
    }) => Promise<ListRebalanceInfoResponse>;
    strategy: ({ asset }: {
        asset: string;
    }) => Promise<StrategyResponse>;
    listStrategy: ({ limit, order, startAfter }: {
        limit?: number;
        order?: RangeOrder;
        startAfter?: string;
    }) => Promise<ListStrategyResponse>;
    allocation: ({ asset }: {
        asset: string;
    }) => Promise<AllocationResponse>;
    listAllocation: ({ limit, order, startAfter }: {
        limit?: number;
        order?: RangeOrder;
        startAfter?: string;
    }) => Promise<ListAllocationResponse>;
}
export interface CoreInterface extends CoreReadOnlyInterface {
    contractAddress: string;
    sender: string;
    mint: ({ amount, receiver }: {
        amount: Uint128;
        receiver: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    gov: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    rebalance: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class CoreClient extends CoreQueryClient implements CoreInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    mint: ({ amount, receiver }: {
        amount: Uint128;
        receiver: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    gov: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    rebalance: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=Core.client.d.ts.map