/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions } from "@tanstack/react-query";
import { RangeOrder, GetLastTokenIdResponse, GetRoleResponse, GetTokenResponse, ListAliasesResponse, ListRolesResponse, ListTokensResponse } from "./Faucet.types";
import { FaucetQueryClient } from "./Faucet.client";
export interface FaucetReactQuery<TResponse, TData = TResponse> {
    client: FaucetQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface FaucetListRolesQuery<TData> extends FaucetReactQuery<ListRolesResponse, TData> {
    args: {
        denom: string;
        limit?: number;
        order?: RangeOrder;
        startAfter?: string[][];
    };
}
export declare function useFaucetListRolesQuery<TData = ListRolesResponse>({ client, args, options }: FaucetListRolesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface FaucetGetRoleQuery<TData> extends FaucetReactQuery<GetRoleResponse, TData> {
    args: {
        account: string;
        denom: string;
    };
}
export declare function useFaucetGetRoleQuery<TData = GetRoleResponse>({ client, args, options }: FaucetGetRoleQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface FaucetGetLastTokenIdQuery<TData> extends FaucetReactQuery<GetLastTokenIdResponse, TData> {
}
export declare function useFaucetGetLastTokenIdQuery<TData = GetLastTokenIdResponse>({ client, options }: FaucetGetLastTokenIdQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface FaucetListTokensQuery<TData> extends FaucetReactQuery<ListTokensResponse, TData> {
    args: {
        limit?: number;
        order?: RangeOrder;
        startAfter?: number;
    };
}
export declare function useFaucetListTokensQuery<TData = ListTokensResponse>({ client, args, options }: FaucetListTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface FaucetGetTokenQuery<TData> extends FaucetReactQuery<GetTokenResponse, TData> {
    args: {
        denom: string;
    };
}
export declare function useFaucetGetTokenQuery<TData = GetTokenResponse>({ client, args, options }: FaucetGetTokenQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface FaucetListAliasesQuery<TData> extends FaucetReactQuery<ListAliasesResponse, TData> {
    args: {
        limit?: number;
        order?: RangeOrder;
        startAfter?: string;
    };
}
export declare function useFaucetListAliasesQuery<TData = ListAliasesResponse>({ client, args, options }: FaucetListAliasesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
//# sourceMappingURL=Faucet.react-query.d.ts.map