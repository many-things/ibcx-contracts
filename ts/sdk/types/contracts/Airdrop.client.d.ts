/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { RegisterPayload, AirdropId, ClaimPayload, ListAirdropsQueryOptions, RangeOrder, GetAirdropResponse, GetClaimResponse, GetLabelResponse, LatestAirdropResponse, ListAirdropsResponse, ListClaimsResponse, ListLabelsResponse, VerifyClaimResponse } from "./Airdrop.types";
export interface AirdropReadOnlyInterface {
    contractAddress: string;
    getAirdrop: ({ id }: {
        id: AirdropId;
    }) => Promise<GetAirdropResponse>;
    listAirdrops: ({ option }: {
        option: ListAirdropsQueryOptions;
    }) => Promise<ListAirdropsResponse>;
    latestAirdropId: () => Promise<LatestAirdropResponse>;
    getClaim: ({ airdrop, claimKey }: {
        airdrop: AirdropId;
        claimKey: string;
    }) => Promise<GetClaimResponse>;
    verifyClaim: ({ claim }: {
        claim: ClaimPayload;
    }) => Promise<VerifyClaimResponse>;
    listClaims: ({ airdrop, limit, order, startAfter }: {
        airdrop: AirdropId;
        limit?: number;
        order?: RangeOrder;
        startAfter?: string;
    }) => Promise<ListClaimsResponse>;
    getLabel: ({ label }: {
        label: string;
    }) => Promise<GetLabelResponse>;
    listLabels: ({ limit, order, startAfter }: {
        limit?: number;
        order?: RangeOrder;
        startAfter?: string;
    }) => Promise<ListLabelsResponse>;
}
export declare class AirdropQueryClient implements AirdropReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getAirdrop: ({ id }: {
        id: AirdropId;
    }) => Promise<GetAirdropResponse>;
    listAirdrops: ({ option }: {
        option: ListAirdropsQueryOptions;
    }) => Promise<ListAirdropsResponse>;
    latestAirdropId: () => Promise<LatestAirdropResponse>;
    getClaim: ({ airdrop, claimKey }: {
        airdrop: AirdropId;
        claimKey: string;
    }) => Promise<GetClaimResponse>;
    verifyClaim: ({ claim }: {
        claim: ClaimPayload;
    }) => Promise<VerifyClaimResponse>;
    listClaims: ({ airdrop, limit, order, startAfter }: {
        airdrop: AirdropId;
        limit?: number | undefined;
        order?: RangeOrder | undefined;
        startAfter?: string | undefined;
    }) => Promise<ListClaimsResponse>;
    getLabel: ({ label }: {
        label: string;
    }) => Promise<GetLabelResponse>;
    listLabels: ({ limit, order, startAfter }: {
        limit?: number | undefined;
        order?: RangeOrder | undefined;
        startAfter?: string | undefined;
    }) => Promise<ListLabelsResponse>;
}
export interface AirdropInterface extends AirdropReadOnlyInterface {
    contractAddress: string;
    sender: string;
    register: (registerPayload: RegisterPayload, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    fund: (airdropId: AirdropId, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claim: (claimPayload: ClaimPayload, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    close: (airdropId: AirdropId, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class AirdropClient extends AirdropQueryClient implements AirdropInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    register: (registerPayload: RegisterPayload, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    fund: (airdropId: AirdropId, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claim: (claimPayload: ClaimPayload, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    close: (airdropId: AirdropId, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=Airdrop.client.d.ts.map