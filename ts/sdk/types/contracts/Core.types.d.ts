/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
export type Uint128 = string;
export interface InstantiateMsg {
    denom: string;
    gov: string;
    initial_assets: [string, Uint128][];
    reserve_denom: string;
}
export type ExecuteMsg = {
    mint: {
        amount: Uint128;
        receiver: string;
    };
} | {
    burn: {};
} | {
    gov: GovMsg;
} | {
    rebalance: RebalanceMsg;
};
export type GovMsg = {
    pause: {
        expires_at: number;
    };
} | {
    release: {};
} | {
    sweep: {};
} | {
    update_reserve_denom: {
        new_denom: string;
    };
} | {
    update_trade_strategy: {
        asset: string;
        cool_down?: number | null;
        max_trade_amount: Uint128;
        routes: SwapRoute[];
    };
};
export type RebalanceMsg = {
    init: {
        amortization: [string, Uint128][];
        deflation: [string, Uint128][];
        manager: string;
    };
} | {
    deflate: {
        amount_reserve_min: Uint128;
        amount_token_in: Uint128;
        asset: string;
    };
} | {
    amortize: {
        amount_reserve_in: Uint128;
        amount_token_min: Uint128;
        asset: string;
    };
} | {
    finish: {};
};
export interface SwapRoute {
    pool_id: number;
    token_denom: string;
}
export type QueryMsg = {
    config: {};
} | {
    pause_info: {};
} | {
    portfolio: {};
} | {
    rebalance_info: {
        id?: number | null;
    };
} | {
    list_rebalance_info: {
        limit?: number | null;
        order?: RangeOrder | null;
        start_after?: number | null;
    };
} | {
    strategy: {
        asset: string;
    };
} | {
    list_strategy: {
        limit?: number | null;
        order?: RangeOrder | null;
        start_after?: string | null;
    };
} | {
    allocation: {
        asset: string;
    };
} | {
    list_allocation: {
        limit?: number | null;
        order?: RangeOrder | null;
        start_after?: string | null;
    };
};
export type RangeOrder = "asc" | "desc";
export type Decimal = string;
export interface AllocationResponse {
    allocation: Uint128;
    asset: string;
    extracted: Uint128;
    ratio: Decimal;
}
export type Addr = string;
export interface ConfigResponse {
    denom: string;
    gov: Addr;
    reserve_denom: string;
}
export interface ListAllocationResponse {
    allocations: AllocationResponse[];
    total: Uint128;
    total_reserve: Uint128;
}
export type ListRebalanceInfoResponse = RebalanceInfoResponse[];
export interface RebalanceInfoResponse {
    amortization: [string, Uint128][];
    deflation: [string, Uint128][];
    finished: boolean;
    id: number;
    init_status: [string, Uint128][];
    manager: Addr;
}
export type ListStrategyResponse = StrategyResponse[];
export interface StrategyResponse {
    asset: string;
    cool_down?: number | null;
    last_traded_at: number;
    max_trade_amount: Uint128;
    routes: SwapRoute[];
}
export interface PauseInfoResponse {
    expires_at?: number | null;
    paused: boolean;
}
export interface PortfolioResponse {
    assets: [string, Uint128][];
    total_supply: Uint128;
}
//# sourceMappingURL=Core.types.d.ts.map